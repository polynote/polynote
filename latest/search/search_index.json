{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":""},{"location":"about/#maintainers","title":"Maintainers","text":"<p>Polynote is maintained by:</p> <ul> <li>jeremyrsmith</li> <li>jonathanindig</li> <li>omidmogasemi</li> </ul>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>Thank you to all the contributors from the Polynote community:</p> <p>Polynote is made possible by the investment of Netflix OSS.</p> <p></p>"},{"location":"contribute/","title":"Contribute","text":"<p>Polynote welcomes contributions of all kinds from the open source community.</p>"},{"location":"contribute/#contributing-code","title":"Contributing code","text":"<p>Pull requests are accepted on our GitHub repository. Website corrections are also accepted for this website at its repository.</p> <p>If you'd like to contribute a pull request, but you're not sure what to work on, look for issues labelled \"good first issue.\"</p> <p>Please read the Contribution guidelines before submitting a pull request.</p>"},{"location":"contribute/#issues-and-documentation","title":"Issues and Documentation","text":"<p>You can contribute to the Polynote project without writing a single line of code! We also need help with writing and maintaining documentation, and with user testing. Documentation pull requests can be submitted to the main repository (you'll find the documentation in markdown format in the <code>docs</code> directory). We'd also appreciate issue reports that you find while using the software.</p>"},{"location":"contribute/#community","title":"Community","text":"<p>Polynote has a gitter chat: </p> <p>Please maintain appropriate, professional conduct while participating in our community. This includes all channels of communication. To report unwelcoming behavior or harassment taking place in the Polynote community, please contact a project maintainer via private chat.</p>"},{"location":"docs/","title":"Getting Started","text":"<p>Welcome to Polynote! Polynote is a different kind of notebook. </p> <p>It supports mixing multiple languages in one notebook, and sharing data between them seamlessly.  It encourages reproducible notebooks with its immutable data model.</p> <p>Get started by installing Polynote, or by taking a tour of the UI!</p> <p>When you're ready, check out the User Guide for more information. Or if you need to customize your  installation, head over to the configuration section. </p> <p>If you'd like to contribute to Polynote, check out the Developing with Polynote section. </p>"},{"location":"docs/about-menu/","title":"About Menu","text":"<p>The about menu provides a deeper view into your instance of Polynote. It can be accessed from the Toolbar.</p> <p> </p>"},{"location":"docs/about-menu/#overview","title":"Overview","text":"<p>The left pane contains several sections to view different pieces of data about Polynote.</p>"},{"location":"docs/about-menu/#about","title":"About","text":"<p>The about menu contains information about your instance's version and most recent server commit. </p> <p></p>"},{"location":"docs/about-menu/#hotkeys","title":"Hotkeys","text":"<p>The hotkeys menu contains a list of all supported keyboard shortcuts in Polynote. You can also view a full list of the  VSCode-style hotkeys supported in code cells here. </p> <p></p>"},{"location":"docs/about-menu/#preferences","title":"Preferences","text":"<p>The preferences menu contains two sections - UI preferences and storage.</p>"},{"location":"docs/about-menu/#ui-preferences","title":"UI Preferences","text":"<p>The preferences menu is where you can customize your vim, theme, and notifications preferences as seen below. </p> <p>Note that these preferences are stored in the browser. You can clear these settings by using the <code>Clear All Preferences and Storage</code> button.</p>"},{"location":"docs/about-menu/#storage","title":"Storage","text":"<p>The storage menu displays key-value pairs of all the data Polynote it storing in your browser's local storage,  and provides easy access to wipe that data. </p> <p></p>"},{"location":"docs/about-menu/#open-notebooks","title":"Open Notebooks","text":"<p>The open notebooks menu contains a list of all open notebooks alongside their kernel status. A notebook is considered open  if any client has it open, or if there is a running kernel associated with it. </p> <p>This means the menu can be used to list notebooks not open in this particular browser, or to find running kernels you  might have forgotten about. </p> <p>Note that the server keeps a notebook open for 30 seconds after it was last closed.  </p> <p></p>"},{"location":"docs/about-menu/#client-side-backups","title":"Client-side Backups","text":"<p>The client-side backups menu contains a list of all the client-side backups that Polynote occasionally creates of your  notebooks and stores in your browser. This pane may take a long time to load if you have many backups. </p> <p>These backups are intended to be used as a last resort, in case something happened to the physical files on disk.  This is not intended to replace a proper version history feature which may be implemented in the future.  Your browser may chose to delete these backups at any time!</p> <p>You can also print these backups to your console in JSON format, or clear all previous backups. Unfortunately,  there is no easy way at this time to recover a backup - you will need to manually parse the JSON (which is not in  <code>.ipynb</code> format). </p> <p></p>"},{"location":"docs/about-menu/#state-inspector","title":"State Inspector","text":"<p>The state inspector menu shows the current state of the server, as well as each notebook you have. This is mostly useful  for debugging purposes and reporting errors. </p>"},{"location":"docs/advanced/","title":"Advanced","text":"<p>This page has some details about advanced concepts relating to how Polynote works. </p> <p>Certain topics are important enough to warrant their own pages; see them in the sidebar on the left. </p>"},{"location":"docs/advanced/#stopping","title":"Stopping","text":"<p>All the Stop buttons found in various places in the UI generally do the same thing - they send an interrupt signal to  the current thing being executed by Polynote - whether that \"thing\" is a kernel launching, dependency download, or cell  execution. </p>"},{"location":"docs/basic-usage/","title":"Basic usage","text":"<p>Info</p> <p>This page aims to get you up and running with your first Polynote notebook. For a more in-depth walk through the  Polynote user interface, check out the Tour.</p> <p>After starting Polynote and opening the application in your browser at http://localhost:8192/ you'll see the home page.</p> <p></p> <p>On the left is the list of notebook files. If you have just installed Polynote, the only notebooks you will have access  to are our examples. Feel free to browse these notebooks for your future reference. </p>"},{"location":"docs/basic-usage/#creating-a-new-notebook","title":"Creating a new notebook","text":"<p>For now, though, we'll just jump right into creating a new notebook.</p> <p> </p> <p>Click the \"New notebook\" button (left), and a dialog will come up (right). Enter a name for your notebook and then click \"Create\". </p> <p></p> <p>The new notebook appears in the Notebooks List \u2460, and is opened in a Polynote tab  \u2461 with the Configuration Pane open \u2462.</p> <p>We'll ignore the configuration for now, so click anywhere on the <code>\u25bc Configuration &amp; dependencies</code> heading  \u2463 to close it. </p> <p>You'll see that the notebook contains a single text cell. Click on that cell and you'll see the text editing toolbar  appear (shown boxed in the image below).</p> <p></p> <p>This contextual toolbar appears when it's useful, based on the currently active cell. You'll see it change as you  interact with cells of various types. </p> <p>Check out the tour for a more comprehensive breakdown of the toolbar and the different cell types.</p>"},{"location":"docs/basic-usage/#creating-a-new-cell","title":"Creating a new cell","text":"<p>A notebook document is made up of a collection of cells. Currently, Polynote supports three cell types: text cells,  code cells, and visualization (viz) cells. </p> <p>Text cells are useful for writing rich text explanations, code cells contain  the code that actually gets run in the notebook, and viz cells aid in inspecting and visualizing data. </p> <p>Now that we've seen a text cell, let's create a new code cell. If you hover the mouse above and below the text cell,  you'll see a divider appear with a small <code>+</code> symbol. Clicking on that divider will create a new cell in its place. </p> <p>Go ahead and click on the divider below the text cell to create a new cell there.</p> <p></p> <p>This new cell is a code cell, with its language (by default) set to Scala. You can change the language with the dropdown  \u2013 there's one right above the cell and one on the main toolbar. </p> <p>If you wanted another text cell instead, you can change it to Text as well (but only in the dropdown on the main toolbar)  and it will turn into a text cell.</p> <p></p> <p>Let's enter some Scala code in the code cell. The code we're writing is just a little snippet for demonstration purposes.  Here it is in case you're following along:</p> Demonstration Code <pre><code>import scala.util.Random.nextGaussian\n\nprintln(\"this is some console output!\")\n\nval x = 50\n\ncase class Point(x: Double, y: Double)\nList.fill(x)(Point(nextGaussian * 2 + 5, nextGaussian * 4))\n</code></pre> <p>Once you start typing, you'll see some activity under Tasks on the right as the Kernel is  started. The Kernel is what handles computing the notebook code, including providing code completions and suggestions.  Once it starts, you'll start seeing interactive completions as you type. </p> <p>Run the code cell by pressing Shift+Enter. The cell runs, and output is displayed. </p> <p>Here's what you should see:</p> <p></p> <p>Let's take a closer look at the results of running the cell.</p> <p></p> <p>We can see that a few things happened after running the code:</p> <ul> <li>The console output from the <code>println</code> statement appeared in an area \u2460 below the cell.</li> <li>The variable <code>x</code> defined in the cell appeared in the Symbol Table \u2461 on the right.</li> <li>The final expression of the cell was bound to a variable called <code>Out</code> \u2462 and some information    about it appeared below the console output \u2463.</li> </ul> <p>Because the expression <code>List.fill(50)(Point(nextGaussian * 2 + 5, nextGaussian * 4))</code> results in \"table-like\"  data \u2013 a collection of structured values \u2013 a special representation of it is displayed. In this Cell Result view, we can see the result's schema (the fields of the structured row) along with its type and some icons. </p> <p>Clicking these icons creates a new viz cell below this one, allowing you to inspect the cell's result in more detail.</p> <p>In addition to inspecting the \"result\" of the cell, any other value that's been bound to a variable can be inspected by  clicking it in the Symbol Table. We'll now take a closer look at the Symbol Table, and how it changes as you interact with the notebook. </p>"},{"location":"docs/basic-usage/#the-symbol-table-and-input-scope","title":"The Symbol Table and input scope","text":"<p>If you create and run some more code cells, you'll notice that the Symbol Table changes depending on which cell is currently focused. It shows you any values that resulted from the current cell above a thick black line, and any values that are available to the cell (from previous cells) below the thick black line.</p> <p></p> <p>In the image above, you can see how the Symbol Table changes based on which cell is selected. This allows you to keep  track of which variables are available, which is useful because Polynote keeps track of the cell input scope. </p> <p>Polynote is different from other notebook tools in that a cell's place in the notebook is important. Every cell has an \"input state\" defined by the cells that have run above it. This means that if we create a code cell that defines a value:</p> <pre><code>val foo = 20\n</code></pre> <p>Then another cell below it can use the value <code>foo</code>:</p> <pre><code>val bar = foo * 2\n</code></pre> <p>But, if we then go back and edit the first cell like this:</p> <pre><code>val foo = 20\nval fail = bar * 2\n</code></pre> <p>It won't work! </p> <p>The value <code>bar</code> isn't in the input scope of the first cell, because it was defined in the second cell. This is very different from how other notebook tools operate; they just have one global state that every cell mutates.</p> <p>In Polynote, the input state of a cell is defined completely by which cells are above it. This is a powerful way to enforce reproducibility in a notebook; it is far more likely that you'll be able to re-run the notebook from top to bottom if later cells can't affect earlier cells.</p> <p>Here's an example of the above scenario in practice (reordering the cells rather than editing their content):</p> <p></p> <p>Next, read about mixing programming languages.</p>"},{"location":"docs/code-cells/","title":"Code Cells","text":"<p>Code cells are the basic unit of a notebook interactive coding experience. </p> <p>In addition to providing a code editor, code cells show the output and results of executing the code. </p> <p></p> <p>The top of a code cell has a small toolbar of cell-related functions: a button to run the cell, a drop-down for  switching languages, and buttons for the following functions: </p> <ul> <li>Hiding the cell code </li> <li>Hiding the cell output </li> <li>Splitting the cell (this will allow you to place two cells side by side)  </li> <li>Wrapping the cell's output (this will prevent any horizontal output overflow) </li> <li>Copying the output to clipboard (if present) </li> </ul>"},{"location":"docs/code-cells/#code-editing","title":"Code Editing","text":"<p>Polynote provides a modern code editing experience (interactive autocomplete, error highlighting) built with the  Monaco Editor. </p>"},{"location":"docs/code-cells/#cell-results","title":"Cell Results","text":"<p>The last expression in a cell is treated as its result (just as a Scala function returns the result of the last  expression). This result is saved as the <code>Out</code> variable and is displayed in the cell's result section. </p> <p>Polynote just shows the value and simple type of simple results. For more complex results, Polynote shows a data view that allows more inspection of the data. </p>"},{"location":"docs/code-cells/#nested-data","title":"Nested Data","text":"<p>Nested data can be explored directly in a tree-like view.</p> Exploring Nested Data <p></p> Source Code <pre><code>case class A(foo: String)\ncase class B(bar: String, a: List[A])\ncase class C(quux: String, b: List[B])\ncase class D(wizzle: String, c: List[C])\ncase class E(wozzle: String, d: List[D])\n\nE(\n    \"wozzle\",\n    D(\n        \"wizzle\",\n        C(\n            \"quux\",\n            B(\n                \"bar\",\n                A(\"foo\") :: A(\"floo\") :: Nil\n            ) :: Nil\n        ) :: Nil\n    ) :: D(\n        \"weasel\",\n        C(\"quacks\", Nil) :: Nil\n    ) :: Nil\n)\n</code></pre>"},{"location":"docs/code-cells/#inspecting-results","title":"Inspecting Results","text":"<p>Like the buttons in the Quick Inspector, the <code>View Data</code>, <code>View Schema</code>, and  <code>Plot Data</code> buttons each create a new Viz Cell underneath the cell. </p>"},{"location":"docs/development/","title":"Developing with Polynote","text":"<p>For contribution guidelines to Polynote, see CONTRIBUTING.md on GitHub. </p> <p>For getting Polynote configured for local development, see DEVELOPING.md on GitHub</p>"},{"location":"docs/docker/","title":"Using Polynote with Docker","text":"<p>See Official Docker Images on GitHub</p>"},{"location":"docs/faq/","title":"FAQ","text":""},{"location":"docs/faq/#why-polynote","title":"Why Polynote?","text":"<p>See the Why? section of our README for more information.</p>"},{"location":"docs/faq/#where-can-i-find-example-notebooks","title":"Where can I find example notebooks?","text":"<p>We've created several example notebooks to showcase common use cases for Polynote - to see them, either  navigate to <code>./docs-site/docs/docs/examples</code> in your local directory or view them on GitHub here. </p> <p>These examples are pre-populated into the Docker distribution of Polynote. </p>"},{"location":"docs/faq/#does-polynote-have-support-for-headless-modeprogrammatic-execution-of-notebooks","title":"Does Polynote have support for headless mode/programmatic execution of notebooks?","text":"<p>Polynote has a very rudimentary notebook runner that can be accessed via the command line today, however there is not currently full support for the programmatic execution of notebooks. You can track this issue here. </p>"},{"location":"docs/faq/#who-can-contribute-to-polynote","title":"Who can contribute to Polynote?","text":"<p>Anyone! Polynote is made possible by the investment of Netflix OSS. </p> <p>You can contribute by opening an issue, updating our documentation, or creating a pull request.  For more information, check out the Developing with Polynote section. </p>"},{"location":"docs/faq/#how-can-i-get-in-touch-with-the-polynote-community","title":"How can I get in touch with the Polynote community?","text":"<p>You can join our Gitter chatroom! This is a great place to give quick feedback,  ask questions, and have more back-and-forth discussions about Polynote. </p>"},{"location":"docs/installation/","title":"Installing Polynote","text":"<p>Danger</p> <p>Polynote allows arbitrary remote code execution, which is necessary for a notebook tool to function.  While we'll try to improve safety by adding security measures, it will never be completely safe to  run Polynote on your personal computer. For example:</p> <ul> <li>It's possible that other websites you visit could use Polynote as an attack vector. Browsing the web    while running Polynote is unsafe.</li> <li>It's possible that remote attackers could use Polynote as an attack vector. Running Polynote on a    computer that's accessible from the internet is unsafe.</li> <li>Even running Polynote inside a container doesn't guarantee safety, as there will always be    privilege escalation and container escape vulnerabilities which an attacker could leverage.</li> </ul> <p>Please be diligent about checking for new releases, as they could contain fixes for critical security  flaws.</p> <p>Please be mindful of the security issues that Polynote causes; consult your company's security team  before running Polynote. You are solely responsible for any breach, loss, or damage caused by running  this software insecurely.</p> <p>Polynote is currently only tested on Linux and MacOS, using the Chrome browser as a client. </p> <p>While we'd love it if Polynote would work perfectly on other platforms and browsers, our small team doesn't have the  bandwidth to test every possible combination. </p> <p>Feel free to try it on your platform, and be sure to let us know about any issues you encounter by filing a bug report.</p> <p>What about Firefox?</p> <p>While we don't test with Firefox, we are very interested in making sure that Firefox is a viable alternative to  Chrome when using Polynote. </p> <p>Right now, we're in need of Firefox users who can provide us with bug reports (and, ideally, bug fixes too!), so  please do let us know if you run into issues using Firefox!</p> <p>What about Windows?</p> <p>Some users have reported that Polynote runs successfully on Windows Subsystem for Linux. We have no plans to support Windows outside of the WSL. </p> <p>Please see these issues for more information: #555, #671. </p> <p>Using Polynote with Docker</p> <p>Instead of installing Polynote on your computer, you can run it within a Docker container. This is a good way to get up and running quickly, though properly configuring the networking settings so a Docker container running on your  laptop can access a remote Spark cluster can be a bit tricky.</p> <p>For more information about using Docker to run Polynote, see the Polynote Docker docs.</p>"},{"location":"docs/installation/#prerequisites","title":"Prerequisites","text":"<p>Polynote has been successfully tested on both Java 8 and Java 11.</p>"},{"location":"docs/installation/#spark-support","title":"Spark support","text":"<p>In order to use Apache Spark\u2122 with Polynote, you'll need to have it set up in your  environment.</p> <p>Using Spark with Polynote</p> <p>If you'll be using Spark with Polynote, please make sure you read this note about Spark and Polynote for more information.</p> <p>Currently, Polynote supports both Spark 2.1 (with Scala 2.11) and 2.4 (with Scala 2.11 and 2.12).</p> <p>Some users have had success running Spark 3.0 with Scala 2.12. Please see this issue for more information</p> <p>Polynote will use the <code>spark-submit</code> command in order to start Spark kernels. </p> <p>The <code>spark-submit</code> command must be working properly and available on the <code>PATH</code> of the environment you used to launch the  server in order for Polynote to work properly with Spark.</p> Installing Spark in your environment <p>These instructions are provided as a convenience, but please note that versions and environments differ. Please refer to the official documentation or other online resources if you run into trouble setting up Spark.</p> <p>As mentioned above, Polynote just needs <code>spark-submit</code> to be working correctly and available on the <code>PATH</code> in the  environment in which it is running. It doesn't matter how you install Spark as long as those two things are true. </p> Standard Spark installation <p>The \"standard\" way to install Spark is just to extract the distribution somewhere and then set up some environment variables. This method works for on both Mac and Linux. </p> <p>You may need to modify these instructions based on your local setup. </p> Spark on Mac <p>Here is an example setup for Polynote on Mac. Also, check out the \"Installing Spark on Mac with Homebrew\" section below for an alternative installation method. </p> <p>Install Java 8 through any service you like (this uses SDKMAN):</p> <pre><code>curl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk install java 8.0.332-zulu\n</code></pre> <p>Download spark and then untar it wherever you like </p> <pre><code>tar -zxvf spark-2.4.7-bin-hadoop2.7.tgz\n</code></pre> <p>Set up the <code>SPARK_HOME</code> and <code>PATH</code> environment variables. You must put these instructions in your  shell configuration somewhere, i.e., <code>~/.bashrc</code> or equivalent. </p> <p>Set <code>SPARK_HOME</code> </p> <pre><code>export SPARK_HOME=`pwd`/spark-2.4.7-bin-hadoop2.7/\n</code></pre> <p>Set <code>PATH</code></p> <pre><code>export PATH=\"$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin\"\n</code></pre> <p>Check if Spark is correctly set up by restarting your terminal and running <code>spark-submit</code> -  you should see usage information. </p> Spark on Linux <p>Here is an example setup for Polynote on Debian. If you are not using Debian or Ubuntu, you may need to  modify these instructions for your distribution.</p> <p>As always, start with updating your package listing. </p> <pre><code>apt-get update\n</code></pre> <p>Install Java (this installs Java 11 for me on Debian buster)</p> <pre><code>apt-get install default-jdk\n</code></pre> <p>Download spark and then untar it wherever you like </p> <pre><code>tar -zxvf spark-2.4.4-bin-hadoop2.7.tgz\n</code></pre> <p>Set up the <code>JAVA_HOME</code>, <code>SPARK_HOME</code> and <code>PATH</code> environment variables. You probably want to put these instructions  in your shell configuration somewhere, i.e., <code>~/.bashrc</code> or equivalent. </p> <p>Set <code>JAVA_HOME</code> </p> <pre><code>export JAVA_HOME=/usr/lib/jvm/default-java/\n</code></pre> <p>Set <code>SPARK_HOME</code> </p> <pre><code>export SPARK_HOME=`pwd`/spark-2.4.7-bin-hadoop2.7/\n</code></pre> <p>Set <code>PATH</code></p> <pre><code>export PATH=\"$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin\"\n</code></pre> <p>Check if Spark is correctly set up by running <code>spark-submit</code>, you should see usage information. </p> Installing Spark on Mac with Homebrew <p>The Homebrew package manager for Mac has a formula for Spark,  but unfortunately it only installs the latest version which may not be compatible with Polynote.</p> <p>Installing an older version of Spark using Homebrew can be a bit of a pain. There is a third party repository that has older Spark versions available for easy download. </p> <p>Warning</p> <p>It is highly recommended that you read through the homebrew formula before installing it - especially when using a third-party repository. The entire thing  is less than 30 lines of Ruby code and quite readable. </p> <p>You can view the available formulae here: https://github.com/eddies/homebrew-spark-tap/tree/master/Formula</p> <p>Here's an example for Spark 2.4:</p> <pre><code>brew tab eddies/spark-tap\nbrew install apache-spark@2.4.6\n</code></pre>"},{"location":"docs/installation/#python-support","title":"Python support","text":"<p>In order to run Polynote, you'll need to have a working Python 3 environment (including <code>pip</code>) installed. Refer to Python's installation instructions for instructions.</p> <p>Using Python with Polynote</p> <p>Polynote officially supports Python 3.7. This is the version of Python supported by the Spark versions we're  targeting. </p> <p>Users have reported getting it to work with Python 3.6 and Python 3.8 (without Spark) with minimal effort.</p> <p>You'll also need to install Polynote's Python dependencies:</p> <pre><code>pip install -r ./requirements.txt\n</code></pre>"},{"location":"docs/installation/#download","title":"Download","text":"<p>Polynote consists of a JVM-based server application, which serves a web-based client. To try it locally, find the latest release on the releases page and download the attached <code>polynote-dist.tar.gz</code> file (you'll find it under <code>Assets</code>). Unpack the archive:</p> <pre><code>tar -zxvpf polynote-dist.tar.gz\ncd polynote\n</code></pre>"},{"location":"docs/installation/#configure","title":"Configure","text":"<p>You won't need to change any of the default configuration in order to get Polynote up and running locally. </p> <p>Please see the configuration documentation for more details on configuring Polynote.</p>"},{"location":"docs/installation/#run","title":"Run","text":"<p>To start the server, run the included python script:</p> <pre><code>./polynote.py\n</code></pre> <p>Once the server has started, navigate your browser to <code>http://localhost:8192</code> (if using the default network configuration).</p>"},{"location":"docs/kernel-pane/","title":"Kernel Pane","text":"<p>The Kernel Pane displays information about the running state of the active notebook's kernel. </p> <p></p> <ul> <li>The Header, which shows the current status of the kernel and controls for starting    and stopping it. </li> <li>The Info section, which shows information about the current kernel.</li> <li>The Symbol Table, which shows the state of the kernel for the    currently-selected cell.</li> <li>The Tasks section, which shows what the kernel is currently doing. </li> </ul>"},{"location":"docs/kernel-pane/#header","title":"Header","text":"<p>The colored circle to the left of the header shows the status of the Kernel. Possible statuses are: </p> Color Meaning Example Gray The client is <code>disconnected</code> from Polynote<sup>1</sup> Red The kernel is <code>stopped</code>: connected but not running Yellow The kernel is <code>busy</code> executing something Green The kernel is running and <code>idle</code> <ol> <li>This means that the browser is unable to talk to the Polynote server. The server might be down, or there might be a    connection issue between the browser and Polynote. </li> </ol> <p>You might have also noticed that the symbol on the right side of the header changes depending on the kernel's status. </p> <p>This symbol is a button that allows you to interact with the kernel:</p> Button State Available Action <code>stopped</code> Launch the kernel <code>busy</code>, <code>idle</code> Kill the kernel <code>disconnected</code> Attempt to reconnect to the server"},{"location":"docs/kernel-pane/#info","title":"Info","text":"<p>The Info section contains information about a currently running Kernel. </p> <p>Currently, standard kernels simply display the current Polynote version, as well as the build commit. </p> <p>Tip</p> <p>Use the version and commit information when reporting issues  to the Polynote team!</p> <p>In addition to the above, Spark kernels show a link to the current Spark UI. </p> <p></p>"},{"location":"docs/kernel-pane/#symbol-table","title":"Symbol Table","text":"<p>The Symbol Table reveals the current state of the notebook, showing the input and output symbols of the currently selected cell (provided that the cell has been run). </p> <p>See the Basic Usage section for a simple example of the symbol table. </p> <p>The symbol table displayes the names and types of the available symbols. In order to see the value of the symbols and to inspect them further, you can hover over them to reveal the Quick Inspector.</p>"},{"location":"docs/kernel-pane/#quick-inspector","title":"Quick Inspector","text":"<p>In the above example, the selected cell has been run, so the symbols defined within are visible in the symbol table.  Hovering over each symbol reveals the Quick Inspector. </p> <p>For the <code>data</code> variable, a simple <code>Seq[(String, String)]</code>, the Quick Inspector shows the entire <code>toString()</code>  value. However, as <code>Out</code> is a <code>DataFrame</code>, only the schema is shown as Polynote evaluates it lazily to prevent collecting huge data unnecessarily.</p> <p>Let's take a closer look at the Quick Inspector. </p> <p></p> <p>The first three buttons - <code>View Data</code>, <code>View Schema</code>, and <code>Plot Data</code>, each create a new  Viz Cell underneath the cell that defined the symbol, with the appropriate tab selected. </p> <p>The last button, the magnifying glass, creates a modal that shows the available representations of the output.</p>"},{"location":"docs/kernel-pane/#tasks","title":"Tasks","text":"<p>The Tasks section exposes information about what the kernel is doing: current and queued executions, as well as errors  that might come up that are not associated with a particular cell.</p>"},{"location":"docs/kernel-pane/#currently-running-tasks","title":"Currently Running Tasks","text":"<p>In the above example, a cell that contains Spark code is being executed, while the cell below it is queued up. </p> <p>On the Tasks section, the current state of the execution is shown: the top task is labeled with the currently-running  cell's ID, as well as a label reflecting the statement being executed currently - in this case, the <code>sparkComputation</code>  variable being computed; in other cases a line number might be shown.  </p> <p>Since the execution is a Spark job, an additional task is shown, showing details of the Spark execution: the job number  and a label for the currently-executing stage (in this case, the call to <code>collect()</code>). </p> <p>Finally, task is generated for the queued cell that will be executed after this one is finished. The tasks list always shows the order in which cells will be executed. </p> <p>Tip</p> <p>Note the Stop button on the top-right corner, which can be used to stop the currently-running task. It behaves like the other stop buttons in the UI; for more details, please see the advanced documentation. </p>"},{"location":"docs/kernel-pane/#kernel-or-server-level-errors","title":"Kernel or Server-level Errors","text":"<p>The Tasks section also provides a location to display error messages that don't belong to a specific cell. For example,  you might see errors encountered during dependency resolution, or kernel crashes, or connection issues. </p>"},{"location":"docs/left-pane/","title":"Left Pane","text":"<p>The Left Pane offers easy access to a file-like browser showing the notebooks in Polynote's workspace, a table  of contents (called <code>Summary</code>) showing the headings in your current notebook, and a search button to search all of Polynote's notebooks. </p>"},{"location":"docs/left-pane/#the-left-bar","title":"The Left Bar","text":"<p>The Left Bar is where you can access these three different sections. The <code>Notebooks</code> and <code>Summary</code> buttons will open the left pane with the corresponding data (or close it, if it was already open). The <code>Search</code> button will open a modal, shown  in the Search Section</p> <p></p>"},{"location":"docs/left-pane/#notebook-list","title":"Notebook List","text":"<p>The Notebooks List displays a listing of all the notebooks in your current workspace.</p> <p></p> <p>Notebooks are displayed in a directory structure. You can sort the list by name or modified time in ascending or descending order by clicking the respective column header. You can change the column width by clicking and dragging on the divider in the header bar between <code>Name</code> and <code>Modified</code>.</p> <p>Clicking on a notebook opens it, and clicking on a directory expands or collapses it.</p> <p>Tip</p> <p>The current workspace can be set in the Storage Configuration.</p>"},{"location":"docs/left-pane/#creating-a-new-notebook","title":"Creating a new notebook","text":"<p>You can create a new notebook by clicking on the green plus sign  in the corner.</p> <p>This will bring up the Create Notebook Dialog, where you can enter the notebook name. If a notebook with that name  already exists, a number will be appended at the end of the filename. </p> <p>Tip</p> <p>Any slashes in the notebook name will place your new notebook in a directory (creating them if they don't already  exist). </p> <p>If you'd like to quickly create a new notebook inside of an existing directory, right-click on any directory and select <code>New Notebook</code>. </p> <p>Additionally, Polynote will add an extension if you don't specify one.  For example, typing in <code>foo/bar/My Notebook</code> will create a <code>My Notebook.ipynb</code> file and put it into a directory  named <code>bar</code>, within a directory named <code>foo</code>. </p>"},{"location":"docs/left-pane/#importing-a-notebook","title":"Importing a notebook","text":"<p>Importing a notebook into Polynote is as simple as dragging and dropping the file onto the Notebooks List!</p> <p>If you hover over and then drop your file into a sub-directory, your file will be imported into that sub-directory.</p> <p></p> <p>Supported import formats</p> <p>Polynote supports importing your existing Jupyter <code>.ipynb</code> files and Zeppelin <code>.json</code> files. Zeppelin files will be  automatically converted into <code>.ipynb</code> files upon import. </p> <p>Note that Polynote doesn't do any translation of the notebook contents, so any platform-specific features, such as  Jupyter \"magics\" (like Toree's <code>%AddJar</code>) or Zeppelin's <code>z.load</code> syntax will need to be manually converted. </p>"},{"location":"docs/left-pane/#rename-copy-delete","title":"Rename, Copy, Delete","text":"<p>You can Rename, Copy, and Delete notebooks using the Context Menu, which you can bring up by right-clicking on a  notebook. </p> <p>Here's a demonstration of Renaming a notebook using the Context Menu. The Copy and Delete functions work rather  similarly.</p> <p></p>"},{"location":"docs/left-pane/#notebook-table-of-contents","title":"Notebook Table of Contents","text":"<p>The Table of Contents displays a neat summary of all of the headings written in markdown in your current notebook to help  make notebook navigation easier. </p> <p>Whenever you add a heading 1-6 (either in the RTE or markdown editor), it will automatically appear in the table of contents. Reordering the cells will also reorder the table of contents.</p> <p>Each heading is indented slightly based on the level of its heading, where <code>h1</code>s are not indented at all and  <code>h6</code>s are indented the most. </p> <p></p>"},{"location":"docs/left-pane/#navigating-with-the-table-of-contents","title":"Navigating with the Table of Contents","text":"<p>To jump directly to a section in the Table of Contents, you can select the heading you want to navigate to in the Left Pane.</p> <p>Whenever you select a cell, even if it does not have a header, it will automatically highlight the closest cell with a header above it (if one exists) to help you better find where you currently are in a notebook. </p>"},{"location":"docs/left-pane/#search","title":"Search","text":"<p>You can search all of your notebooks for a line of text. This will index all of the notebooks in your mounted directories,  returning results from both code and text cells, but not outputs. Note that this feature only supports searching for a  single line - multi-line search is not supported. </p> <p>You will receive a scrollable list of results, which highlight the line of text returned, what file it comes from, and  which cell. </p> <p>Tip</p> <p>You can click directly on a result to jump straight to that cell (this will open the notebook if it is not already open). </p> <p></p>"},{"location":"docs/mixing-programming-languages/","title":"Mixing Programming Languages","text":"<p>One of Polynote's most interesting features is its support for polyglot notebooks, where cells within the same notebook  can be written in different languages.</p> <p>Variables can also be shared across languages, as all execution is done within a single process. </p>"},{"location":"docs/mixing-programming-languages/#execution-state-in-polynote","title":"Execution state in Polynote","text":"<p>We hinted previously that the way Polynote handles cell execution is a little special.</p> <p>As a reminder, the kernel keeps track of all the symbols defined by a cell execution. These symbols are part of the cell's state, which is made available to downstream cells (those below the cell in question) when they in turn are executed.</p> <p>Polynote stores these symbols, alongside their types and other information, in a Scala-based format. Symbols defined by and provided to other languages are wrapped (and unwrapped) appropriately.</p> <p>For more details, how this works under the hood, examples of going from Python to Scala,  and information about its limitations and caveats, check out the Python documentation.</p>"},{"location":"docs/mixing-programming-languages/#polyglot-example","title":"Polyglot example","text":"<p>Continuing our example notebook from before, here's a trivial example (note that the bottom cell has Python selected in the language drop-down). </p> <p></p> <p>The <code>foo</code> and <code>bar</code> Scala variables can be accessed directly in Python, because they represent primitive  types (<code>Int</code>s in this case). This also works the other way 'round, from Python to Scala, in much the same way.</p>"},{"location":"docs/mixing-programming-languages/#use-case-plotting-scala-data-with-matplotlib","title":"Use Case: Plotting Scala data with Matplotlib","text":"<p>Real-world usage at Netflix</p> <p>This example notebook illustrates a contrived version of a common use-case at Netflix. Our recommendation and personalization infrastructure is heavily JVM-based, and Algorithm Engineers and Scientists want to interface with our platform in order to, for example:</p> <ul> <li>transform data in a type-safe way using Scala</li> <li>access Model Lifecycle data</li> <li>generate features based on online data snapshots</li> </ul> <p>Once they get the data, they'd like to analyze and visualize it using the Python tools they are familiar with, such as pandas and matplotlib.</p> <p>A more complex example of a more typical usage can be found in the <code>examples/</code> folder in  <code>Plotting Scala data with Matplotlib.ipynb</code> which is reproduced below. </p> <p>We'll go over this example in detail.</p> <p></p>"},{"location":"docs/mixing-programming-languages/#a-direct-approach-using-primitives","title":"A direct approach using primitives","text":"<p>This notebook takes a direct approach to polyglot development. By crossing language boundaries using primitive data  structures, you don't need to worry about the details of language-specific data structures or implementations. </p> <p>Let's go over this notebook, which consists of two cells. The first, a Scala cell, prepares some data, while the second, a Python cell, plots it.</p> <p>Scala cell</p> <pre><code>val colors = Array(\"red\", \"green\", \"blue\")\nval n = 750\nval flattenedLength = colors.length * n * 2 // 2 for x and y\nval data = (0 until flattenedLength).map(_ =&gt; Math.random()).toArray // converted to Array for Python interop\n</code></pre> <p>This cell generates an <code>Array[Double]</code> that is a flattened representation of data in three dimensions - <code>color</code>,  <code>x</code>, and <code>y</code>. </p> <p>This data is then fed into the Python cell to be plotted: </p> <p>Python cell</p> <pre><code>import matplotlib.pyplot as plt\nfrom numpy.random import rand\n\nfig, ax = plt.subplots()\n\nfor color in colors:\n    # since data is just a 1-D array we need to split it up to fit the matplotlib example\n    x = data[:n]\n    data = data[n:]\n    y = data[:n]\n    data = data[n:]\n\n    scale = 200.0 * rand(n)\n    ax.scatter(x, y, c=color, s=scale, label=color,\n               alpha=0.3, edgecolors='none')\n\nax.legend()\nax.grid(True)\n\nplt.show()\n</code></pre> <p>This cell steps through the <code>data</code> array and, for each <code>color</code>, unflattens the <code>x</code> and <code>y</code> data for plotting (note that both <code>data</code> and <code>color</code> are Scala variables accessed directly from Python).</p>"},{"location":"docs/mixing-programming-languages/#can-we-do-better","title":"Can we do better?","text":"<p>This is pretty straightforward, but you might have noticed that the interchange values between the two languages are <code>Array</code>s, rather than the more idiomatic (for Scala) <code>Seq</code>s. You might also notice that it was pretty  unnatural to flatten <code>data</code> like we did. </p> <p>The reason for this is that it's easier to interchange between Scala and Python using primitives and basic structures  like Arrays. </p> <p>You might not realize it, but when you work with Scala there's all sorts of stuff going on behind the scenes,  such as implicits, or encoded Java method names (like <code>$colon$colon()</code>). </p> <p>Python doesn't know about this, so when we interact with a Scala object from Python we see it in all its gory details: </p> <p></p> <p>However, with a little Scala knowledge we can rewrite the plotting code to be more idiomatic, at the expense of having  to do (a bit) more work in Python to massage the data. </p>"},{"location":"docs/mixing-programming-languages/#a-more-idiomatic-implementation","title":"A more idiomatic implementation","text":"<p>First, we'll use some more idiomatic code to generate our point data: </p> <pre><code>case class Point(x: Double, y: Double, color: String)\nval colors = Seq(\"red\", \"green\", \"blue\")\nval n = 750\nval idiomaticData = for {\n    color &lt;- colors\n    n     &lt;- (0 to n)\n} yield Point(Math.random(), Math.random(), color)\n</code></pre> <p>Wow, a <code>case class</code> AND a <code>for</code> expression? This is surely extremely idiomatic Scala code.  Not an <code>Array</code> in sight!</p> <p>Let's inspect <code>idiomaticData</code> for a moment. </p> <p></p> <p>Inspecting and Visualizing Data</p> <p>This image showcases using the Quick Inspector and Viz cells  to easily inspect values within a notebook.</p> <p>Now that we've taken a look at <code>idiomaticData</code> and seen that it's a <code>Seq[Point]</code>, we can delete the Viz cell and  start working with it using Python. </p> <p>Since we're no longer working with primitives, we need to do a little data preparation. We'll build a <code>list</code>,  iterate over <code>idiomaticData</code>, and extract values from <code>Point</code>. </p> <p>We want to end up with a simple 2D-Array we can use with <code>matplotlib</code>. </p> <pre><code>data = []\nfor idx in range(0, idiomaticData.length()):\n    point = idiomaticData.apply(idx)\n    data.append([point.x(), point.y(), point.color()])\n</code></pre> <p>There are two things of note here. </p> <p>First, we need to manually iterate through the collection, generating an index which we can pass into the <code>apply(idx: Int): A</code> method of the <code>Seq</code> to select elements from it. </p> <p>Second, we'll access the <code>case class</code> members using the member accessor methods as usual, but note that with  Python we need to specify <code>()</code>, as in <code>point.x()</code>, since of course in Python parentheses are always required,  even for nullary functions (ones that have no arguments). </p> <p>At this point, the <code>data</code> variable is a nice <code>list</code> of <code>list</code>s, and we can easily turn it into a  Pandas DataFrame:  <pre><code>import pandas as pd\n\ndf = pd.DataFrame(data=data, columns=['x', 'y', 'color'])\n</code></pre></p> <p>Note that we have to manually specify the column names here. A more advanced example might extract the fields from  <code>Point</code> and pass them into Python, but we'll pass on that for now. </p> <p>Now that our data is a Pandas DataFrame we can manipulate it as usual. For example, we can add a <code>scale</code> column to it:</p> <pre><code>import numpy as np\n\ndf['scale'] = np.random.uniform(1, 200, df.shape[0])\n</code></pre> <p>Finally, we can plot our DataFrame in the familiar way. </p> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ngroups = df.groupby(\"color\")\nfor name, group in groups:\n    ax.scatter(group.x, group.y, c=group.color, s=group.scale, label=name,\n               alpha=0.3, edgecolors='none')\n\nax.legend(loc=\"upper right\")\nax.grid(True)\n\nplt.show()\n</code></pre> <p>That's it! This notebook can be found in the <code>examples/</code> folder as well, in <code>Plotting Scala data with Matplotlib (Idiomatic).ipynb</code>. You can see a screenshot below.</p> <p></p> <p>Next, read about using Spark with Polynote.</p>"},{"location":"docs/notebook-configuration/","title":"Configuration","text":"<p>The Notebook Configuration section allows you to set metadata for this notebook's execution environment. </p> <p>The environment can be broken up into three general categories, as shown in the following diagram: </p> <p></p> <ul> <li>Dependencies: the JVM and Python dependencies needed by your code</li> <li>Spark Properties: Spark-specific configuration</li> <li>Kernel Configuration: other runtime configuration for the Kernel</li> </ul>"},{"location":"docs/notebook-configuration/#dependencies","title":"Dependencies","text":"<p>This section provides options for configuring dependencies that should be available when the notebook is executed.</p>"},{"location":"docs/notebook-configuration/#jvm-dependencies","title":"JVM dependencies","text":"<p>JVM dependencies can be specified in the familiar  Group, Artifact, Version (or GAV) notation, such as <code>org.http4s:http4s-core:1.0.0-M16</code>. </p> <p>Polynote will resolve and download this dependency, as well as its transitive dependencies, using  Coursier. Use the Exclusions section to exclude any pesky transitive dependencies that are causing you problems.</p> <p>Use the Resolvers section to set up any custom resolvers (e.g., your company's internal resolver). Polynote supports  both Maven and Ivy resolvers (the type of resolver can be selected in the dropdown).</p> <p>Additionally, Polynote supports specifying a URL directly to a jar file - such as <code>file:///home/jars/myCoolLibrary.jar</code>.  Supported schemas include <code>http</code> and <code>s3</code> (if Spark is enabled). </p> <p>Warning</p> <p>Note that if you specify a jar directly, Polynote will not resolve any transitive dependencies for this jar. In  general, we recommend using GAV coordinates if you can.</p>"},{"location":"docs/notebook-configuration/#python-dependencies","title":"Python dependencies","text":"<p>Similarly, Polynote allows you to specify Python dependencies using anything supported by pip</p> <p>This means that you can specify pip dependencies by simply naming them, (e.g., <code>requests</code>), using a version  (<code>requests==2.25.1</code>), and even a requirement specifier (<code>requests&gt;=2.25</code>). You can also pass in a file URL, as long as it's supported by pip. </p> <p>You can also specify additional pip resolvers (e.g., your company's internal resolver) in the Resolvers section (select <code>pip</code> in the dropdown). Polynote just passes the resolver into pip (using  <code>--extra-index-url</code>), so be sure your repository URL works with that. </p> <p>Polynote creates a virtual environment for your notebook when you specify any pip dependencies. See the python  documentation for more details. </p>"},{"location":"docs/notebook-configuration/#dependency-lists","title":"Dependency Lists","text":"<p>You can place your dependencies in a newline-separated <code>.txt</code> file and include that file's URL in your dependencies. The <code>.txt</code> file will be downloaded and each dependency added individually. </p> <p>Note that this method will automatically cache all of the dependencies from the <code>.txt</code> file. </p>"},{"location":"docs/notebook-configuration/#dependency-caching","title":"Dependency Caching","text":"<p>By default, Polynote caches JVM dependencies that are specified with URLs, as well as the virtual environment created for your notebook. </p> <p>You can choose to manually bust the cache by either appending <code>?nocache</code> to the end of the dependency, or by  unfolding the Advanced Options pane for your dependency by clicking on the <code>...</code> button next to it. </p> <p></p> <p>Changing the cache option affects different types of dependencies differently. </p> <ul> <li>JVM Dependencies<ul> <li>URL-based dependencies are affected by this setting. If using the cache, Polynote uses the cached file (if    present) instead of downloading it again. Conversely, if the cache is disabled for this dependency then Polynote    will download the jar anew each time.</li> <li>GAV notation dependencies are unaffected by this change (Coursier caches these dependencies itself and we don't   expose any way to change that for now)</li> </ul> </li> <li>Python Dependencies<ul> <li>Python dependencies are affected by this setting. Since they share a virtual environment for this notebook,    bypassing the cache for any Python dependency will bust the cache for all Python dependencies, since this is    implmemented as a simple deletion and recreation of the virtual environment. </li> </ul> </li> </ul> <p>Feedback requested</p> <p>If these restrictions are inconvenient for you, please let us know and we can look into improving this feature. </p>"},{"location":"docs/notebook-configuration/#scala-and-spark","title":"Scala and Spark","text":"<p>There are two complementary ways to specify Spark properties. </p> <ul> <li><code>Spark Templates</code> are sets of related configuration that can be defined in the Server Configuration</li> <li><code>Spark Properties</code> are key-value pairs that Polynote will insert into the Spark configuration. </li> </ul> <p>For more details on using Spark with Polynote, check out the Spark documentation</p> <p>The Scala version can be also be set in this section (independently of the version running on the server). Currently, 2.11, 2.12, and 2.13 are supported (since those are the versions supported by Spark). </p> <p>Warning</p> <p>If a Spark template that defines the <code>version_configs</code> key is selected, the Scala version dropdown will only display the Scala versions listed under that key. This behavior enables you to ensure that the Scala version you select matches that of your Spark installation. </p>"},{"location":"docs/notebook-configuration/#kernel","title":"Kernel","text":"<p>The Kernel configuration contains some miscellaneous configuration that affect the runtime environment of the Kernel. </p> <p>In the first section, you can add Environment Variables that will be made available to the Kernel process. </p> <p>In the second section you can add any additional JVM Arguments that Polynote will set when it launches the  Kernel process. </p>"},{"location":"docs/notebook-configuration/#copying-configurations","title":"Copying Configurations","text":"<p>The copy and paste buttons below the last section offer easy access to copy all three sections between notebooks. </p> <p>When you click the <code>Copy Configurations</code> button, your selections will be copied to your clipboard - note that any new changes you made to your current notebook's configuration will be copied over, but will not be saved to your current notebook.  </p> <p>When you click the <code>Paste Configurations</code> button, your selections will automatically update and save if the  contents of your clipboard represent a valid notebook configuration. </p>"},{"location":"docs/notebook/","title":"Notebook","text":"<p>The Notebook Pane displays the contents of the notebooks themselves. </p> <p></p> <p>A notebook consists of its Configuration and a collection of  Text, Code, and  Viz cells.</p>"},{"location":"docs/python/","title":"Using Polynote with Python","text":"<p>For now, Python is the major non-JVM-based language you'll be using with Polynote. Polynote uses Jep to execute Python code within the JVM. Jep does most of the heavy-lifting when it  comes to Python interop. </p> <p>Most Python code should work out of the box on Polynote, without needing anything special. Please let us know if you run into any problems with Python code that works well in Jupyter or the Python REPL. </p>"},{"location":"docs/python/#python-dependencies","title":"Python dependencies","text":"<p>When you specify a Python dependency in the configuration, Polynote  creates a virtual environment scoped to your notebook. </p> <p>This virtual environment is reused on subsequent runs of the notebook, unless your dependencies change or you explicitly bust the cache. </p> <p>Additionally, the virtual environments are isolated from each other but not from the system, since Polynote specifies the  <code>--system-site-packages</code> flag when creating the environment. </p> <p>Experimental: PySpark And Dependencies</p> <p>Polynote attempts to add the dependencies you specify to Spark by downloading their zip files and adding them to the  Spark context if it exists. </p> <p>This means that your Python dependencies should be shipped to your executors (and available) to your code that  runs there! </p>"},{"location":"docs/python/#sharing-between-python-and-scala","title":"Sharing between Python and Scala","text":"<p>Our goals right now are to support a few, key use-cases with a focus on sharing from Scala to Python, such as plotting data generated in Scala with <code>matplotlib</code>, or using Scala-generated data with <code>tensorflow</code> and <code>scikit-learn</code>. We've found that the interop between Python and Scala can be very powerful even if it is limited to these simple cases.</p> <p>Tip</p> <p>If you're going to be moving back and forth between Python and Scala a lot, we highly recommend reading  how Jep works.</p> <p>Here are a few important points to keep in mind when sharing between Python and Scala:</p> <ul> <li>Jep handles the conversion from Scala -&gt; Python.<ul> <li>It converts primitives and strings into brand-new Python primitives and strings.</li> <li>An object of any other type is wrapped as a <code>PyJObject</code>, which is an interface allowing Python to directly access   that objects attributes. Note that in this case, nothing is copied - <code>PyJObject</code> holds a reference to the underlying   JVM object.</li> <li>Note that Jep is based on Java, not Scala. This means that when it wraps a Scala object as a <code>PyJObject</code>, you won't   get Scala sugar - things like multiple parameter lists, implicits, etc. - when you work with it in Python.   This can limit your ability to use a lot of super-scala-stuff with Python.</li> </ul> </li> <li>Jep handles conversion from Python -&gt; Scala and Polynote adds a little bit of sugar on top.<ul> <li>Similar to the other way round, Jep automatically converts primitives and strings into brand-new JVM primitives and strings.</li> <li>Additionally, Jep supports some other conversions such as Python <code>dict</code> to <code>java.util.HashMap</code></li> <li>Polynote will retrieve an object of any other type as a <code>PyObject</code>. Similar to <code>PyJObject</code>, a <code>PyObject</code> wraps a pointer   to a Python object. </li> </ul> </li> </ul>"},{"location":"docs/python/#going-from-python-to-scala","title":"Going from Python to Scala","text":"<p>As previously mentioned, Polynote has some extra sugar for handling certain types of Python objects as part of the  <code>PythonObject</code> API, which helps with things like using Scala-specific syntax on these data types as well as visualization. </p> <p>For example, if a user wanted to iterate over a Python <code>List</code> (which gets converted automatically to a <code>java.util.ArrayList</code>)  using for-comprehension, they would get a runtime error. The <code>PythonObject</code> API offers the <code>asScalaList</code> method, which  handles the conversion to return a <code>List[PythonObject]</code>, as demonstrated in the below example. </p> <p>Python Cell</p> <pre><code>ids = [1234, 5678, 9012, 3456]\ntyps = ['Number', 'Number', 'Number', 'Number']\n</code></pre> <p>Scala Cell</p> <pre><code>case class ResultItem(id: Int, typ: String)\n\nval resultData = for {\n  i &lt;- ids.asScalaList\n  t &lt;- typs.asScalaList\n} yield ResultItem(i.as[Integer], t.as[String])\n</code></pre> <p>More Details on the PythonObject API</p> <p>If you'd like to view the entire <code>PythonObject</code> API, you can do so  here.</p> <p>Note that these implementation details may change and while we'll work hard to update this information we can't guarantee that it won't get out-of-date. Of course, feel free to drop us a line if you think that's the case!</p>"},{"location":"docs/server-configuration/","title":"Server Configuration","text":"<p>To change any of the default configuration, you'll need to copy the included <code>config-template.yml</code> file to <code>config.yml</code>, and uncomment the sections you'd like to change. Check out the template itself for more information. </p> <p>Note that any changes will only take effect upon restarting your Polynote instance. </p>"},{"location":"docs/server-configuration/#templates","title":"Templates","text":"<p>Templates allow you to clone an existing notebook from the UI. Clone means you will be able to copy the entire contents  of the notebook - including its configuration, dependency lists, code cells (and their previous output), etc. </p> <p>Templates are specified as absolute file paths, which your file system should have read permission for. To include this path, create a  list under <code>notebook_templates</code> under <code>behavior</code> in your <code>config.yml</code> file. </p> <p>Once you've included your list, restart Polynote - you should see the options available when creating a notebook. </p>"},{"location":"docs/spark/","title":"Using Spark with Polynote","text":"<p>Polynote has deep integration with Apache Spark, and supports running both Scala and Python code with Spark out of the box. </p> <p>In order to use Spark, you must first have it installed. Then, restart Polynote and  open the configuration for the notebook you'd like to use with Spark, and scroll down to the  <code>Spark configuration</code> section. As long as you set anything there - any Spark property, any Spark template - Polynote will launch your notebook with Spark enabled. </p> <p></p> <p>Please note that if a selected Spark template sets <code>spark_submit_args</code> in either the version configuration or as part of the template itself and you also specify the <code>sparkSubmitArgs</code> property in the notebook configuration,  these will be concatenated as they are passed to <code>spark-submit</code>.  They will be passed in order of least to most specific,  with the base-level Spark arguments passed first and the notebook-level arguments passed last.  This is different than any other Spark properties (e.g. <code>spark.executor.memory</code>) specified more than  once in different places; for those, the value that is set at the most specific configuration level  simply takes precedence and replaces any other value. </p>"},{"location":"docs/text-cells/","title":"Text Cells","text":"<p>Text Cells provide you the option of a Rich Text Editing or a traditional markdown editing experience.  </p>"},{"location":"docs/text-cells/#rich-text-editing","title":"Rich Text Editing","text":"<p>Rich Text Editing allows you to edit and format text as you type it, like editing a document.  </p> <p>The Text Toolbar contains standard Rich Text Editing elements: </p> <ul> <li>Text style (Heading, Paragraph, etc.)</li> <li>Emphasis (bold, italic, underline, strikethrough)</li> <li>List (unordered, ordered)</li> <li>Indentation</li> </ul> <p></p> <p>It also contains a few non-Standard options.</p>"},{"location":"docs/text-cells/#code-and-links","title":"Code and Links","text":"<p>The code button tags the currently-selected text as <code>code</code>, formatting it as monospaced. </p> <p>The link button tags the currently-selected text as a link. Clinking on a link will reveal the URL in a tooltip,  allowing you to navigate to the website. </p> <p></p>"},{"location":"docs/text-cells/#latex-editor","title":"LaTeX Editor","text":"<p>You can also input <code>LaTeX</code> into your text cells, using the button that looks like a Sigma. </p> <p></p>"},{"location":"docs/text-cells/#markdown-editing","title":"Markdown Editing","text":"<p>The Markdown Editor allows you to edit your text directly as markdown in a code editor and see it rendered as  traditional compiled markdown. </p> <p>To enable markdown editing in place of traditional Rich Text Editing, set the <code>markdown</code> setting to <code>true</code> in  the About menu. </p> <p>To view an example of markdown in Polynote, see the example notebook on Writing Markdown.</p> <p></p>"},{"location":"docs/toolbar/","title":"Toolbar","text":"<p>The toolbar is one of the primary ways you'll be interacting with Polynote. </p> <p>It is divided into sections, which we will go over now. </p> <p></p> <p>The toolbar is divided into three sections: Notebook,  Cell and About. </p>"},{"location":"docs/toolbar/#notebook-section","title":"Notebook section","text":"<p>This section contains buttons that interact with the currently active notebook. The three relevant buttons are:</p> <ul> <li>The Run All button  which queues up all cells of the current notebook to run in order.</li> <li>The Download button  which downloads the current notebook as  an ipynb file. </li> <li>The Clear Output button  which clears the output of all notebook cells. </li> </ul> <p>The other two buttons are placeholders for future functionality that are currently not in use. </p>"},{"location":"docs/toolbar/#cell-section","title":"Cell section","text":"<p>This section contains elements for interacting with the currently active cell. </p> <p>This section has two subsections. On the left is the Cell section, which holds elements for interacting with the  current cell regardless of its type. On the right is the a cell detail section, which changes depending on whether the currently active cell is a Code or Text cell. </p> <p>We'll start with the invariant Cell section first. </p> <p></p> <ul> <li>The Cell Type dropdown is used to change the type of the cell. This is equivalent to the dropdown found on    Code cells but it can also convert a cell from <code>Code</code> to <code>Text</code> and vice-versa.</li> <li>The Insert Cell Above  and Below     buttons, which insert a new cell above or   below the currently selected cell.</li> <li>The Delete Cell button  which deletes the currently   selected cell.</li> </ul>"},{"location":"docs/toolbar/#code-cells","title":"Code Cells","text":"<ul> <li>The run cell button  runs the currently selected cell. </li> <li>The next button  runs all    cells above the currently selected cell until (and including) the currently selected cell.</li> <li>The stop button  cancels any currently-running    execution (not limited to the current cell). See the advanced section to learn more about how   stopping works.</li> </ul>"},{"location":"docs/toolbar/#text-cells","title":"Text Cells","text":"<p>The Text cell subsection contains the typical rich text editor interaction elements, along with a few special ones.</p> <p>For more details, see the Text Cell documentation. </p>"},{"location":"docs/toolbar/#about-section","title":"About section","text":"<p>Finally, the About section at the top-right corner contains buttons to access the About menu.</p>"},{"location":"docs/tour/","title":"Tour","text":"<p>Welcome to the tour of Polynote's UI! </p> <p>Polynote takes its inspiration from IDE-like tools, bringing a rich UI into the notebook experience. </p>"},{"location":"docs/tour/#the-polynote-ui","title":"The Polynote UI","text":"<p>Here, we'll go over the various parts of the UI briefly, and then drill down on each later in the tour. </p> <p></p> <p>This screenshot divides the UI into four sections: </p> <ul> <li>The Toolbar at the top, which collects buttons for interaction with the notebook</li> <li>The left Pane, which offers easy access to a file-like browser showing the    notebooks in Polynote's workspace, a table of contents showing the headings in your current notebook, and a search button    to search all of Polynote's notebooks. </li> <li>The Kernel Pane on the right, which shows the current state of the notebook. </li> <li>The Notebook section itself in the middle, which displays the actual notebook. </li> </ul> <p>The above sections provide details about the specific functionality of each part of the UI. </p>"},{"location":"docs/tour/#panes-in-polynote","title":"Panes in Polynote","text":"<p>Before you go learn more about the specifics, let's just talk about how the two panes work.</p>"},{"location":"docs/tour/#panes-can-be-collapsed","title":"Panes can be collapsed","text":"<p>If you'd like more horizontal space to see the Notebook section, you can collapse one or both of the panes. </p> <p>Simply click on any empty space on the header, and the pane will collapse to the side. Click the title of the header (for example, <code>Kernel</code> if you have collapsed the Kernel Pane) in order to expand the pane again. </p> <p></p>"},{"location":"docs/tour/#panes-can-be-resized","title":"Panes can be resized","text":"<p>If you want more room for the Notebook but don't want to hide a pane entirely, you can resize a pane by dragging it.</p> <p></p> <p>Tip</p> <p>Polynote remembers your pane collapse and size preferences in your browser's local storage. </p> <p>As long as you're using Polynote with the same browser, your customizations should be persisted!</p> <p>Next up, learn about the Toolbar.</p>"},{"location":"docs/visualization-and-viz-cells/","title":"Visualization and Viz Cells","text":"<p>Polynote supports a number of different ways to visualize data. </p>"},{"location":"docs/visualization-and-viz-cells/#data-reprs","title":"Data Reprs","text":"<p>All symbols in a Polynote notebook have one or more Reprs, short for \"Representations\", that Polynote generates and then sends to the frontend. </p> <p>They range from simple (such as the symbol's <code>toString()</code> value), to the complex (such as a streaming view into a Spark <code>DataFrame</code>). </p> <p>Reprs form the building blocks for all of Polynote's native data visualization. They can be viewed in a number of  different ways. For example, as the result of a Code Cell, or in a Viz cell. </p> <p>Let's take a look at a simple example: the Reprs generated for a <code>String</code>. We'll show them in both a Code Cell result as well as a Viz Cell. </p> <p></p> <p>As the result of a Code Cell, the <code>String</code> is being stored in the <code>Out</code> symbol. Polynote generates two Reprs  for a <code>String</code>. First, all symbols get a <code>StringRepr</code>, which just corresponds to its <code>toString()</code> output. </p> <p>Additionally, most symbols have some sort of representation of the symbol's type and value, such as a <code>DataRepr</code> in this case, which carries the symbol's type as well as a serialized representation of symbol's entire value. </p> <p>In this case, <code>Out</code>'s <code>DataRepr</code> is seen both in the output of Cell 3, and in the \"Data\" tab of the Viz cell. In this case, since <code>Out</code> is a simple <code>String</code>, its <code>DataRepr</code> displays its value in its entirety.</p> <p>Clicking on the \"Plain\" tab of the Viz cell would display <code>Out</code>'s <code>StringRepr</code>, which is, of course, simply <code>\"foo\"</code>.</p> <p>Repr display priority</p> <p>When there are multiple Reprs available, Polynote tries to choose the richest available Repr as the default one to display. In this case, the <code>DataRepr</code> is clearly richer than the <code>StringRepr</code>, which is why it's shown in the Code cell output and displayed by default in the Viz cell.</p>"},{"location":"docs/visualization-and-viz-cells/#visualization-cell-types","title":"Visualization Cell Types","text":"<p>While Code Cells do show some handy visualization of results, for plotting or as permanent fixtures of a notebook, it makes sense to break out the visualization of a specific value into its own cell. </p> <p>Polynote provides native Vega support for plotting data. A Vega spec can be  rendered using a Code Cell, by changing its language to \"Vega spec\". Additionally, Viz Cells provide a Plot Editor for supported data types. </p> <p>We'll start by discussing Polynote's Vega support. </p>"},{"location":"docs/visualization-and-viz-cells/#vega-cells","title":"Vega Cells","text":"<p>Vega Cells are merely Code Cells with <code>Vega spec</code> set as the language. </p> <p>As an example, here's the \"Simple Bar Chart\" example  from the Vega-Lite Docs in Polynote.</p> <p></p> <p>Note that the data in this chart is stored under <code>values</code> in the <code>data</code> field of the spec itself. That's not terribly useful: most of the time, you'll want to reference data defined in variables in your notebook.</p> <p>Luckily, Polynote supports that! Let's rewrite the Vega example but this time we'll have it reference data defined in  Scala. </p> <p>First, we'll grab the data from the example and turn it into a Scala cell:</p> <pre><code>case class AB(a: String, b: Int)\nval dataValues = Seq(\n    AB(\"A\", 28), \n    AB(\"B\", 55), \n    AB(\"C\", 43),\n    AB(\"D\", 91), \n    AB(\"E\", 81), \n    AB(\"F\", 53),\n    AB(\"G\", 19), \n    AB(\"H\", 87), \n    AB(\"I\", 52)\n)\n</code></pre> <p>Now, we can reference <code>dataValues</code> in our code.</p> <p><pre><code>{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n  \"title\": \"dataValues\",\n  \"data\": {\n    \"name\": \"dataValues\",\n    \"values\": dataValues.aggregate([\"a\"], [{\"b\":\"mean\"}])\n  },\n  \"mark\": {\n    \"type\": \"bar\",\n    \"tooltip\": {\n      \"content\": \"data\"\n    }\n  },\n  \"encoding\": {\n    \"x\": { \"field\": \"a\", \"type\": \"nominal\", \"axis\": {}},\n    \"y\": { \"field\": \"mean(b)\", \"type\": \"quantitative\", \"axis\": {}}\n  }\n}\n</code></pre> In order to transform the Scala code into something that Vega can handle, we call <code>aggregate</code> on the collection which collects the values into a format that Vega can understand.</p> <p>TODO: why \"mean\"?</p> <p>Remembering the aggregation syntax can be tricky, which is why we recommend using the Plot Editor in a Viz Cell.</p>"},{"location":"docs/visualization-and-viz-cells/#viz-cells","title":"Viz Cells","text":"<p>Viz cells are a type of cell specifically geared towards, well, visualization. A Viz cell inspects the Reprs of a single symbol defined in the notebook, and provides ways to visualize it.</p> <p>You can create a new Viz cell by clicking on a Code Cell inspection button (which will create a new Viz cell inspecting the <code>Out</code> result of the cell), or through the  Quick Inspector (which will create a new Viz cell inspecting the current symbol). </p> <p>Like other cells, a Viz cell can only inspect symbols that are in its scope, that is, defined in a cell above it. </p> <p>We already saw a simple Viz cell above, so let's take a look at a more interesting example: the  <code>dataValues</code> shown earlier. </p> <p>As a reminder, <code>dataValues</code> is a collection of type <code>Seq[AB]</code>, where <code>AB</code> is  <code>case class AB(a: String, b: Int)</code>.  </p> <p>This time, we'll start with the \"Plain\" tab of the Viz cell, which shows the <code>StringRepr</code> as mentioned above (you might recognize this output as the result of calling <code>toString()</code> on a Scala <code>List</code>).</p> <p></p> <p>Notice that this Viz Cell has no \"Data\" tab. Instead, there are three tabs we haven't seen before: \"Plot\", \"Schema\",  and \"Browse\".</p> <p>These new tabs are actually all generated from the same Repr! Since <code>dataValues</code> is a collection, Polynote generates a  <code>StreamingDataRepr</code> for it, which is a special type of <code>DataRepr</code> specifically meant for collections. </p> <p>More about <code>StreamingDataRepr</code></p> <p>Unlike <code>DataRepr</code>, <code>StreamingDataRepr</code> is a lazy representation of the data. This means that when a  <code>StreamingDataRepr</code> is sent to the frontend, the data stored in the value remains in the kernel and can be streamed to the frontend in batches. </p> <p>This is particularly useful when dealing with potentially huge datasets, like Spark <code>DataFrame</code>s, which are  streams themselves. </p> <p>Let's take a look at the three new tabs, which show different aspects of the <code>StreamingDataRepr</code> of <code>dataValues</code>.  </p>"},{"location":"docs/visualization-and-viz-cells/#schema","title":"Schema","text":"<p>The Schema view shows the types of the entries in the collection. In this case, the fields of <code>AB</code> are a <code>a: String</code> and <code>b: Int</code>, shown below in a struct-like display. </p> <p></p> <p>Nested schemas can also be expanded, like nested data in a Code Cell's output.</p>"},{"location":"docs/visualization-and-viz-cells/#browse","title":"Browse","text":"<p>The Browse view provides a tabular view of <code>dataValues</code>. As the data is streamed to the browser, you'll need to page through it to see any values, as shown below.</p> <p></p> <p>The example data all fits in the first page, but larger data can be paged back and forth as needed. </p> <p>Note that paging through the data may potentially start non-trivial computations in some cases (e.g., with a Spark  <code>DataFrame</code>)</p>"},{"location":"docs/visualization-and-viz-cells/#plot","title":"Plot","text":"<p>The Plot view is the most complex part of a Viz Cell. It contains a Plot Editor which generates a Vega plot in a more  straightforward manner, allowing customization of the plot type, selection of Dimensions and Measures to plot, and more without the need to edit Vega code directly. </p> <p>The example below shows the Plot Editor being used to generate the example graph shown in the  Vega Cell documentation above. </p> <p></p> <p>To extract the Vega spec generated by the editor, click on the  to  generate a Vega Cell that contains the generated spec. </p>"},{"location":"docs/visualization-and-viz-cells/#other-ways-to-visualize","title":"Other ways to visualize","text":"<p>If the Reprs that Polynote automatically generates aren't enough, there are plenty of other ways to hook into Polynote's  display capabilities. </p>"},{"location":"docs/visualization-and-viz-cells/#defining-your-own-reprs","title":"Defining your own Reprs","text":"<p>If you'd like to add display capabilities to types in your code, you can implement your own Reprs by extending the <code>ReprsOf</code> trait. </p> <p>This allows you to register Reprs for your types. The easiest way to create a new Repr is to use a <code>MIMERepr</code>, which  takes a MIME type and content string. For example, you to display some HTML you could return  <code>MIMERepr(\"text/html\", \"&lt;h1&gt;Heading&lt;/h1&gt;\")</code>, or to show an image you could return  <code>MIMERepr(\"image/png\", \"&lt;a base64 encoding of a PNG&gt;\")</code>. </p> <p>Here's an example adding a simple HTML <code>MIMERepr</code> for the results of type <code>MyThing</code>.</p> <p>DOESN'T WORK!</p> <pre><code>import polynote.runtime._\n\ncase class MyThing(a: String)\nobject MyThing {\n    implicit object MyThingRepr extends ReprsOf[MyThing3]{\n        override def apply(value: MyThing): Array[ValueRepr] = \n            Array(MIMERepr(\"text/html\", s\"&lt;strong&gt;${value.a}&lt;/strong&gt;\"))\n    }\n}\n\nMyThing(\"hi\")\n</code></pre>"},{"location":"docs/visualization-and-viz-cells/#using-kerneldisplay","title":"Using <code>kernel.display</code>","text":"<p>Let's say you just want to display some output, but you don't want to go through the trouble of defining a special Repr.</p> <p>You can use the <code>kernel.display</code> package (available in <code>polynote.runtime</code>) to hook into Polynote's display mechanism. </p> <p>To display an HTML string, use <code>kernel.display.html(content: String)</code>, which takes in a <code>String</code> and  outputs it as HTML. </p> <p>You can also display other MIME types using <code>kernel.display.content(mimeType: String, content: String)</code>, where <code>content</code> is a <code>String</code> representation of the content (e.g., base64 encoded for an image). In fact,  <code>kernel.display.html</code> is actually a shortcut for <code>kernel.display.content(\"text/html\", _)</code>. </p>"},{"location":"docs/visualization-and-viz-cells/#visualization-with-python","title":"Visualization with Python","text":"<p>The Python ecosystem has a rich history of notebook usage with Jupyter/IPython, and many Python libraries define  rich display representations for use in a notebook environment. </p> <p>Polynote supports these <code>_repr_*_()</code> methods, too! Polynote simply translates these methods into their corresponding  <code>MIMERepr</code>.</p> <p></p> <p>Polynote supports all of the <code>_repr_*_()</code> standard methods, including <code>_repr_mimebundle_()</code>. This means that the  <code>IPython.display</code> API also works in Polynote. </p> <p></p> <p>Additionally, Polynote understands <code>pandas.DataFrame</code>s and generates <code>StreamingDataRepr</code>s for them, just like it does for Spark. </p> <p></p> <p>Finally, as shown in the tour, Polynote  supports <code>matplotlib</code>, too!</p>"}]}